<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="scheduler">
	<resultMap type="com.dianping.cricket.scheduler.pojo.Job" id="JobMap">
		<constructor>
			<arg column="name" javaType="String"/>
			<arg column="group" javaType="String"/>
		</constructor>
		<id property="id" column="id"/>		
		<result property="description" column="description"/>
		<result property="owner" column="owner"/>
		<result property="mail" column="mail"/>
		<result property="schedule" column="schedule"/>
		<result property="mainEntry" column="main_entry"/>
		<result property="type" column="type"/>
		<result property="sla" column="sla"/>
		<result property="sle" column="sle"/>
		<result property="disabled" column="disabled"/>
		<result property="createdTime" column="created_time"/>
		<result property="updatedTime" column="updated_time"/>
	</resultMap>
	<resultMap type="com.dianping.cricket.scheduler.pojo.JobStatus" id="JobStatusMap">	
		<result property="status" column="status"/>
		<result property="recovered" column="recovered"/>
		<result property="startTime" column="start_time"/>
		<result property="endTime" column="end_time"/>
		<association property="job" resultMap="JobMap"/>
	</resultMap>
	<select id="findJobs" resultMap="JobMap">
		select `id`, `name`, `group`, `description`, `owner`, `mail`, `schedule`, `main_entry`, `type`, `sla`, `sle`, `disabled`, `created_time`, `updated_time` 
		from job
	</select>
	<select id="findRecoveredJobs" parameterType="date" resultMap="JobStatusMap">
		select a.`id` as id, `status`, `recovered`, `start_time`, case when `end_time` = '0000-00-00 00:00:00' then null else `end_time` end as `end_time`,
		`name`, `group`, `description`, `owner`, `mail`, `schedule`, `main_entry`, `type`, `sla`, `sle`, a.`created_time` as created_time, a.`updated_time` as updated_time  
		from job_status a 
		inner join job b on a.id = b.id
		where a.status = 'running' and a.start_time &lt; #{startTime}
	</select>
	<select id="isExisted" parameterType="com.dianping.cricket.scheduler.pojo.Job" resultType="int">
		select count(*) from job 
		where `name` = #{jobKey.name} and `group` = #{jobKey.group}
	</select>
	<select id="serviceLevelStatistics" resultType="hashmap">
		select a.`id`, a.`name`, a.`group`, count(*) as total,
			sum(
				case when unix_timestamp(end_time) - unix_timestamp(start_time) > a.sla 
			    then 1 
			    else 0 
			    end
			) as total_sla,
		    sum(
		    	case when unix_timestamp(end_time) - unix_timestamp(start_time) > a.sle
			    then 1 
			    else 0 
		    	end
		    ) as total_sle
		from job a
		inner join job_history b on a.id = b.job
		where status = 'success'
		group by a.`id`, a.`name`, a.`group`;
	</select>
	<select id="countFailures" resultType="hashmap">
		select a.`id`, a.`name`, a.`group`, count(*) as total,
			sum(
				case when status = 'failure'
			    then 1 
			    else 0 
			    end
			) as failures
		from job a
		inner join job_history b on a.id = b.job
		group by a.`id`, a.`name`, a.`group`;
	</select>
	<select id="getTimeCosts" resultType="hashmap">
		select a.`id`, a.`name`, a.`group`, 
			min(b.`status`) as `status`, date(b.`start_time`) as `start_date`,
			avg(unix_timestamp(b.end_time) - unix_timestamp(b.start_time)) as `time_cost` 
		from job a
		inner join job_history b on a.id = b.job
		where b.created_time > date_add(current_date(), interval -1 month)
		group by a.`id`, a.`name`, a.`group`, date(b.`start_time`)
		order by a.`id`, date(b.`start_time`);
	</select>
	<select id="getTimeIntervals" resultType="hashmap">
		select  a.`id`, a.`name`, a.`group`, 
			min(b.start_time) as start_time, 
		    avg(unix_timestamp(b.end_time) - unix_timestamp(b.start_time)) as time_cost 
		from job a
		inner join job_history b on a.id = b.job
		where b.`status` = 'success'
		group by a.`id`, a.`name`, a.`group`
	</select>
	<select id="findObsoleteJars" resultType="com.dianping.cricket.scheduler.pojo.JobJar">
		select id, name, stored_name as storedName, created_time as createdTime
		from job_jar
		where created_time &lt; date_add(current_timestamp, interval -5 minute)
	</select>
	<select id="findRecipients" resultType="com.dianping.cricket.scheduler.pojo.Recipient">
		select id, recipient, mail, created_time as createdTime
		from job_mail_recipient
		where id = #{job.id};
	</select>
	<insert id="createJob" parameterType="com.dianping.cricket.scheduler.pojo.Job" useGeneratedKeys="true" keyProperty="id">
		insert into job(`id`, `name`, `group`, `description`, `owner`, `mail`, `schedule`, `main_entry`, `type`, `sla`, `sle`, `created_time`, `updated_time`) 
		values(0, #{jobKey.name}, #{jobKey.group}, #{description}, #{owner}, #{mail}, #{schedule}, #{mainEntry}, #{type}, #{sla}, #{sle}, current_timestamp, current_timestamp)
	</insert>
	<insert id="createJobStatus" parameterType="com.dianping.cricket.scheduler.pojo.JobStatus">
		insert into job_status(`id`, `status`, `recovered`, `start_time`, `end_time`, `created_time`, `updated_time`) 
		values (#{job.id}, #{status}, #{recovered}, #{startTime}, #{endTime}, current_timestamp, current_timestamp);
	</insert>
	<insert id="logStatus" parameterType="com.dianping.cricket.scheduler.pojo.JobStatus">
		insert into job_history(`id`, `job`, `status`, `recovered`, `start_time`, `end_time`) values (0, #{job.id}, #{status}, #{recovered}, #{startTime}, #{endTime});
	</insert>
	<insert id="createJobJar" parameterType="hashmap" useGeneratedKeys="true" keyProperty="id">
		insert into job_jar(`id`, `name`, `stored_name`) values (0, #{name}, #{stored_name});
	</insert>
	<insert id="createRecipient" parameterType="com.dianping.cricket.scheduler.pojo.Recipient">
		insert into job_mail_recipient(`id`, `recipient`, `mail`) values (#{job.id}, #{recipient}, #{mail});
	</insert>
	<update id="updateStatus" parameterType="com.dianping.cricket.scheduler.pojo.Job">
		update job_status set status = #{status}, start_time = #{startTime}, end_time = <choose><when test="endTime != null">#{endTime}</when><otherwise>0</otherwise></choose> 
		where id = #{job.id}
	</update>
	<delete id="deleteJob" parameterType="int">
		delete from job
		where id = #{jobId}
	</delete>
	<delete id="deleteJobStatus" parameterType="int">
		delete from job_status
		where id = #{jobId}
	</delete>
	<delete id="deleteHistoryStatus" parameterType="int">
		delete from job_history
		where job = #{jobId}
	</delete>
	<delete id="deleteJobJar" parameterType="string">
		delete from job_jar
		where stored_name = #{jarName}
	</delete>
	<delete id="deleteRecipient" parameterType="com.dianping.cricket.scheduler.pojo.Recipient">
		delete from job_mail_recipient
		where id = #{job.id} and mail = #{mail}
	</delete>
</mapper>