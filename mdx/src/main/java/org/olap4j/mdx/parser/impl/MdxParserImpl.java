/* Generated By:JavaCC: Do not edit this line. MdxParserImpl.java */
package org.olap4j.mdx.parser.impl;

import org.olap4j.impl.Olap4jUtil;
import org.olap4j.mdx.*;
import org.olap4j.Axis;
import org.olap4j.mdx.parser.MdxParseException;

import java.util.*;
import java.io.StringReader;
import java.math.BigDecimal;

/**
 * MDX parser, generated from MdxParser.jj.
 *
 * <p>The public wrapper for this parser is {@link DefaultMdxParserImpl}.
 *
 * @author jhyde
 */
@SuppressWarnings({
    "ConstantIfStatement",
    "UnnecessarySemicolon",
    "UnnecessaryLabelOnBreakStatement",
    "RedundantIfStatement"
})
public class MdxParserImpl implements MdxParserImplConstants {
/*
    private MdxParserValidator.QueryPartFactory factory;
    private Statement statement;
    */
    private DefaultMdxParserImpl.FunTable funTable;
    private boolean strictValidation;

    private static final Comparator<AxisNode> AXIS_NODE_COMPARATOR =
        new Comparator<AxisNode>() {
            public int compare(AxisNode o1, AxisNode o2) {
                return o1.getAxis().axisOrdinal() - o2.getAxis().axisOrdinal();
            }
        };

    public MdxParserImpl(
        String queryString,
        boolean debug,
        DefaultMdxParserImpl.FunTable funTable,
        boolean strictValidation)
    {
        this(new StringReader(term(queryString)));
        this.funTable = funTable;
        this.strictValidation = strictValidation;
    }

    private static String term(String s) {
        return s.endsWith("\u005cn") ? s : (s + "\u005cn");
    }

    public void setTabSize(int tabSize) {
        jj_input_stream.setTabSize(tabSize);
    }

    ParseTreeNode recursivelyParseExp(String s) throws ParseException {
        MdxParserImpl parser =
            new MdxParserImpl(
                s,
                false,
                funTable,
                strictValidation);
        return parser.expression();
    }

    private ParseRegion region(Token token) {
        return new ParseRegion(
            token.beginLine,
            token.beginColumn,
            token.endLine,
            token.endColumn);
    }

    ParseRegion region(final ParseTreeNode node, List<ParseTreeNode> nodes) {
        return node.getRegion().plus(nodes);
    }

    private List<ParseRegion> regionList(final List<ParseTreeNode> nodes) {
        return new AbstractList<ParseRegion>() {
            public ParseRegion get(int index) {
                return nodes.get(index).getRegion();
            }

            public int size() {
                return nodes.size();
            }
        };
    }

    ParseRegion region(final ParseTreeNode... nodes) {
        return ParseRegion.sum(
            new AbstractList<ParseRegion>() {
                public ParseRegion get(int index) {
                    return nodes[index].getRegion();
                }

                public int size() {
                    return nodes.length;
                }
            }
        );
    }

    private static final String DQ = '"' + "";
    private static final String DQDQ = DQ + DQ;

    private static String stripQuotes(
        String s, String prefix, String suffix, String quoted)
    {
        assert s.startsWith(prefix) && s.endsWith(suffix);
        s = s.substring(prefix.length(), s.length() - suffix.length());
        s = Olap4jUtil.replace(s, quoted, suffix);
        return s;
    }

    private ParseTreeNode createCall(
        ParseTreeNode left,
        IdentifierSegment segment,
        List<ParseTreeNode> argList)
    {
        if (argList != null) {
            if (left != null) {
                // Method syntax: "x.foo(arg1, arg2)" or "x.foo()"
                argList.add(0, left);
                return new CallNode(
                    segment.getRegion().plus(argList),
                    segment.getName(), Syntax.Method, argList);
            } else {
                // Function syntax: "foo(arg1, arg2)" or "foo()"
                return new CallNode(
                    segment.getRegion().plus(argList),
                    segment.getName(), Syntax.Function, argList);
            }
        } else {
            // Member syntax: "foo.bar"
            // or property syntax: "foo.RESERVED_WORD"
            Syntax syntax;
            boolean call = false;
            switch (segment.getQuoting()) {
            case UNQUOTED:
                syntax = Syntax.Property;
                call = funTable.isProperty(segment.getName());
                break;
            case QUOTED:
                syntax = Syntax.QuotedProperty;
                break;
            default:
                syntax = Syntax.AmpersandQuotedProperty;
                break;
            }
            if (left instanceof IdentifierNode && !call) {
                return ((IdentifierNode) left).append(segment);
            } else if (left == null) {
                return new IdentifierNode(segment);
            } else {
                return new CallNode(
                    segment.getRegion().plusAll(Arrays.asList(left.getRegion())),
                    segment.getName(), syntax, left);
            }
        }
    }

// ----------------------------------------------------------------------------
// Entry points
  final public ParseTreeNode statementEof() throws ParseException {
    ParseTreeNode qp;
    qp = statement();
    jj_consume_token(0);
        {if (true) return qp;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode expressionEof() throws ParseException {
    ParseTreeNode e;
    e = expression();
    jj_consume_token(0);
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// ----------------------------------------------------------------------------
// Elements
//
//
// <identifier> ::= <regularIdentifier> | <delimitedIdentifier>
  final public IdentifierSegment identifier() throws ParseException {
    String id;
    KeySegment keyId;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIMENSION:
    case PROPERTIES:
      id = keyword();
        // Allow a non-reserved keyword to be converted back into an identifier
        // if it is not in a context where it is meaningful.
        {if (true) return new NameSegment(null, id, Quoting.UNQUOTED);}
      break;
    case IdentifierNode:
      jj_consume_token(IdentifierNode);
        {if (true) return new NameSegment(region(token), token.image, Quoting.UNQUOTED);}
      break;
    case QUOTED_ID:
      jj_consume_token(QUOTED_ID);
        {if (true) return new NameSegment(
            region(token),
            stripQuotes(token.image, "[", "]", "]]"),
            Quoting.QUOTED);}
      break;
    case AMP_QUOTED_ID:
    case AMP_UNQUOTED_ID:
      keyId = keyIdentifier();
        {if (true) return keyId;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
  final public KeySegment keyIdentifier() throws ParseException {
    List<NameSegment> list = new ArrayList<NameSegment>();
    NameSegment key;
    label_1:
    while (true) {
      key = ampId();
            list.add(key);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP_QUOTED_ID:
      case AMP_UNQUOTED_ID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
        {if (true) return new KeySegment(list);}
    throw new Error("Missing return statement in function");
  }

  final public NameSegment ampId() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMP_QUOTED_ID:
      jj_consume_token(AMP_QUOTED_ID);
        {if (true) return new NameSegment(
            region(token),
            stripQuotes(token.image, "&[", "]", "]]"),
            Quoting.QUOTED);}
      break;
    case AMP_UNQUOTED_ID:
      jj_consume_token(AMP_UNQUOTED_ID);
        {if (true) return new NameSegment(
            region(token),
            token.image.substring(1),
            Quoting.UNQUOTED);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// a keyword (unlike a reserved word) can be converted back into an
// identifier in some contexts
  final public String keyword() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIMENSION:
      jj_consume_token(DIMENSION);
        {if (true) return "Dimension";}
      break;
    case PROPERTIES:
      jj_consume_token(PROPERTIES);
        {if (true) return "Properties";}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IdentifierNode compoundId() throws ParseException {
    IdentifierSegment i;
    List<IdentifierSegment> list = new ArrayList<IdentifierSegment>();
    i = identifier();
        list.add(i);
    label_2:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(DOT);
      i = identifier();
            list.add(i);
    }
        {if (true) return new IdentifierNode(list);}
    throw new Error("Missing return statement in function");
  }

// ----------------------------------------------------------------------------
// Expressions
  final public ParseTreeNode unaliasedExpression() throws ParseException {
    ParseTreeNode x, y;
    x = term5();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case XOR:
      case COLON:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        y = term5();
            x = new CallNode(region(x, y), "OR", Syntax.Infix, x, y);
        break;
      case XOR:
        jj_consume_token(XOR);
        y = term5();
            x = new CallNode(region(x, y), "XOR", Syntax.Infix, x, y);
        break;
      case COLON:
        jj_consume_token(COLON);
        y = term5();
            x = new CallNode(region(x, y), ":", Syntax.Infix, x, y);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode term5() throws ParseException {
    ParseTreeNode x, y;
    x = term4();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      y = term4();
            x = new CallNode(region(x, y), "AND", Syntax.Infix, x, y);
    }
        {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode term4() throws ParseException {
    ParseTreeNode x;
    Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case DIMENSION:
    case NULL:
    case PROPERTIES:
    case LBRACE:
    case LPAREN:
    case MINUS:
    case PLUS:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case SINGLE_QUOTED_STRING:
    case DOUBLE_QUOTED_STRING:
    case IdentifierNode:
    case QUOTED_ID:
    case AMP_QUOTED_ID:
    case AMP_UNQUOTED_ID:
      x = term3();
        {if (true) return x;}
      break;
    case NOT:
      jj_consume_token(NOT);
            op = token;
      x = term4();
        {if (true) return new CallNode(region(op).plus(x), "NOT", Syntax.Prefix, x);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode term3() throws ParseException {
    ParseTreeNode x, y;
    Token op;
    x = term2();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case IS:
      case MATCHES:
      case NOT:
      case EQ:
      case GE:
      case GT:
      case LE:
      case LT:
      case NE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case GE:
      case GT:
      case LE:
      case LT:
      case NE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
                   op = token;
          break;
        case NE:
          jj_consume_token(NE);
                    op = token;
          break;
        case LT:
          jj_consume_token(LT);
                    op = token;
          break;
        case GT:
          jj_consume_token(GT);
                    op = token;
          break;
        case LE:
          jj_consume_token(LE);
                    op = token;
          break;
        case GE:
          jj_consume_token(GE);
                    op = token;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        y = term2();
            x = new CallNode(region(x, y), op.image, Syntax.Infix, x, y);
        break;
      default:
        jj_la1[10] = jj_gen;
        if (jj_2_2(2)) {
          jj_consume_token(IS);
          jj_consume_token(NULL);
            x = new CallNode(x.getRegion(), "IS NULL", Syntax.Postfix, x);
        } else if (jj_2_3(2)) {
          jj_consume_token(IS);
          y = term2();
            x = new CallNode(region(x, y), "IS", Syntax.Infix, x, y);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IS:
            jj_consume_token(IS);
            jj_consume_token(EMPTY);
            x = new CallNode(x.getRegion(), "IS EMPTY", Syntax.Postfix, x);
            break;
          case MATCHES:
            jj_consume_token(MATCHES);
            y = term2();
            x = new CallNode(region(x, y), "MATCHES", Syntax.Infix, x, y);
            break;
          default:
            jj_la1[11] = jj_gen;
            if (jj_2_4(2)) {
              jj_consume_token(NOT);
              jj_consume_token(MATCHES);
              y = term2();
            x = new CallNode(
                region(x, y),
                "NOT",
                Syntax.Prefix,
                new CallNode(
                    region(x, y), "MATCHES", Syntax.Infix, x, y));
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IN:
                jj_consume_token(IN);
                y = term2();
            x = new CallNode(region(x, y), "IN", Syntax.Infix, x, y);
                break;
              case NOT:
                jj_consume_token(NOT);
                jj_consume_token(IN);
                y = term2();
            x = new CallNode(
                region(x, y),
                "NOT",
                Syntax.Prefix,
                new CallNode(
                    region(x, y), "IN", Syntax.Infix, x, y));
                break;
              default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
        {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode term2() throws ParseException {
    ParseTreeNode x, y;
    x = term();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        y = term();
            x = new CallNode(region(x, y), "+", Syntax.Infix, x, y);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        y = term();
            x = new CallNode(region(x, y), "-", Syntax.Infix, x, y);
        break;
      case CONCAT:
        jj_consume_token(CONCAT);
        y = term();
            x = new CallNode(region(x, y), "||", Syntax.Infix, x, y);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode term() throws ParseException {
    ParseTreeNode x, y;
    x = factor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
      case SOLIDUS:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        jj_consume_token(ASTERISK);
        y = factor();
            x = new CallNode(region(x, y), "*", Syntax.Infix, x, y);
        break;
      case SOLIDUS:
        jj_consume_token(SOLIDUS);
        y = factor();
            x = new CallNode(region(x, y), "/", Syntax.Infix, x, y);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode factor() throws ParseException {
    ParseTreeNode p;
    Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case DIMENSION:
    case NULL:
    case PROPERTIES:
    case LBRACE:
    case LPAREN:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case SINGLE_QUOTED_STRING:
    case DOUBLE_QUOTED_STRING:
    case IdentifierNode:
    case QUOTED_ID:
    case AMP_QUOTED_ID:
    case AMP_UNQUOTED_ID:
      p = primary();
        {if (true) return p;}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      p = primary();
        {if (true) return p;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              op = token;
      p = primary();
        {if (true) return new CallNode(region(op).plus(p), "-", Syntax.Prefix, p);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode primary() throws ParseException {
    ParseTreeNode e;
    e = atom();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(DOT);
      e = segmentOrFuncall(e);
    }
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode segmentOrFuncall(ParseTreeNode left) throws ParseException {
    IdentifierSegment segment;
    List<ParseTreeNode> argList = null;
    segment = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      if (jj_2_5(2147483647)) {
                argList = Collections.emptyList();
      } else {
        argList = expOrEmptyList();
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
        {if (true) return createCall(left, segment, argList);}
    throw new Error("Missing return statement in function");
  }

  final public LiteralNode numericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_NUMERIC_LITERAL:
      jj_consume_token(DECIMAL_NUMERIC_LITERAL);
        {if (true) return LiteralNode.createNumeric(
            region(token), new BigDecimal(token.image), false);}
      break;
    case UNSIGNED_INTEGER_LITERAL:
      jj_consume_token(UNSIGNED_INTEGER_LITERAL);
        {if (true) return LiteralNode.createNumeric(
            region(token), new BigDecimal(token.image), false);}
      break;
    case APPROX_NUMERIC_LITERAL:
      jj_consume_token(APPROX_NUMERIC_LITERAL);
        {if (true) return LiteralNode.createNumeric(
            region(token), new BigDecimal(token.image), true);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode atom() throws ParseException {
    ParseTreeNode e;
    IdentifierSegment segment;
    List<ParseTreeNode> lis;
    Token op;
    ParseRegion region;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLE_QUOTED_STRING:
      jj_consume_token(SINGLE_QUOTED_STRING);
        {if (true) return LiteralNode.createString(
            region(token), stripQuotes(token.image, "'", "'", "''"));}
      break;
    case DOUBLE_QUOTED_STRING:
      jj_consume_token(DOUBLE_QUOTED_STRING);
        {if (true) return LiteralNode.createString(
            region(token), stripQuotes(token.image, DQ, DQ, DQDQ));}
      break;
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
      e = numericLiteral();
        {if (true) return e;}
      break;
    case NULL:
      jj_consume_token(NULL);
        {if (true) return LiteralNode.createNull(region(token));}
      break;
    case CAST:
      jj_consume_token(CAST);
             op = token;
      jj_consume_token(LPAREN);
      e = unaliasedExpression();
      jj_consume_token(AS);
      segment = identifier();
      jj_consume_token(RPAREN);
        {if (true) return new CallNode(
            region(op).plus(region(token)),
            "CAST",
            Syntax.Cast,
            e,
            LiteralNode.createSymbol(segment.getRegion(), segment.getName()));}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
               op = token;
      lis = expList();
      jj_consume_token(RPAREN);
        // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
        // are just expressions.
        {if (true) return new CallNode(
            region(op).plus(region(token)), "()", Syntax.Parentheses, lis);}
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
               op = token;
      if (jj_2_6(2147483647)) {
            lis = Collections.emptyList();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case CAST:
        case DIMENSION:
        case NOT:
        case NULL:
        case PROPERTIES:
        case LBRACE:
        case LPAREN:
        case MINUS:
        case PLUS:
        case UNSIGNED_INTEGER_LITERAL:
        case APPROX_NUMERIC_LITERAL:
        case DECIMAL_NUMERIC_LITERAL:
        case SINGLE_QUOTED_STRING:
        case DOUBLE_QUOTED_STRING:
        case IdentifierNode:
        case QUOTED_ID:
        case AMP_QUOTED_ID:
        case AMP_UNQUOTED_ID:
          lis = expList();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
        {if (true) return new CallNode(
            region(op).plus(region(token)), "{}", Syntax.Braces, lis);}
      break;
    case CASE:
      e = caseExpression();
        {if (true) return e;}
      break;
    case DIMENSION:
    case PROPERTIES:
    case IdentifierNode:
    case QUOTED_ID:
    case AMP_QUOTED_ID:
    case AMP_UNQUOTED_ID:
      // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
          // Properties "x.PROP" and methods "ParseTreeNode.meth(a)" are in primary().
          segment = identifier();
                             region = segment.getRegion();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        jj_consume_token(BANG);
        segment = identifier();

      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        if (jj_2_7(2147483647)) {
                lis = Collections.emptyList();
        } else {
          lis = expOrEmptyList();
        }
        jj_consume_token(RPAREN);
            region = region.plus(region(token));
        break;
      default:
        jj_la1[23] = jj_gen;
                      lis = null;
      }
        if (lis == null) {
            {if (true) return new IdentifierNode(segment);}
        } else {
            {if (true) return new CallNode(
                region.plus(lis), segment.getName(), Syntax.Function, lis);}
        }
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode caseExpression() throws ParseException {
    ParseTreeNode e, e2;
    List<ParseTreeNode> list = new ArrayList<ParseTreeNode>();
    boolean match = false;
    ParseRegion region;
    jj_consume_token(CASE);
             region = region(token);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case DIMENSION:
    case NOT:
    case NULL:
    case PROPERTIES:
    case LBRACE:
    case LPAREN:
    case MINUS:
    case PLUS:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case SINGLE_QUOTED_STRING:
    case DOUBLE_QUOTED_STRING:
    case IdentifierNode:
    case QUOTED_ID:
    case AMP_QUOTED_ID:
    case AMP_UNQUOTED_ID:
      e = expression();
            match = true;
            list.add(e);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      jj_consume_token(WHEN);
      e = expression();
      jj_consume_token(THEN);
      e2 = expression();
            list.add(e);
            list.add(e2);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      e = expression();
            list.add(e);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(END);
        if (match) {
            {if (true) return new CallNode(
                region.plus(region(token)), "_CaseMatch", Syntax.Case, list);}
        } else {
            {if (true) return new CallNode(
                region.plus(region(token)), "_CaseTest", Syntax.Case, list);}
        }
    throw new Error("Missing return statement in function");
  }

// ----------------------------------------------------------------------------
// Member Value Expression
  final public ParseTreeNode expression() throws ParseException {
    ParseTreeNode e;
    IdentifierSegment i;
    e = unaliasedExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      jj_consume_token(AS);
      i = identifier();
            IdentifierNode id = new IdentifierNode(i);
            e = new CallNode(region(e, id), "AS", Syntax.Infix, e, id);
    }
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode expressionOrEmpty() throws ParseException {
    ParseTreeNode e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case DIMENSION:
    case NOT:
    case NULL:
    case PROPERTIES:
    case LBRACE:
    case LPAREN:
    case MINUS:
    case PLUS:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case SINGLE_QUOTED_STRING:
    case DOUBLE_QUOTED_STRING:
    case IdentifierNode:
    case QUOTED_ID:
    case AMP_QUOTED_ID:
    case AMP_UNQUOTED_ID:
      e = expression();
        {if (true) return e;}
      break;
    default:
      jj_la1[29] = jj_gen;
        {if (true) return new CallNode(region(token), "", Syntax.Empty);}
    }
    throw new Error("Missing return statement in function");
  }

// Comma-separated list of expressions, some of which may be empty. Used
// for functions.
  final public List<ParseTreeNode> expOrEmptyList() throws ParseException {
    ParseTreeNode e;
    List<ParseTreeNode> list = new LinkedList<ParseTreeNode>();
    e = expressionOrEmpty();
        list.add(e);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      e = expressionOrEmpty();
            list.add(e);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

// List of expressions, none of which may be empty.
  final public List<ParseTreeNode> expList() throws ParseException {
    ParseTreeNode e;
    List<ParseTreeNode> list = new LinkedList<ParseTreeNode>();
    e = expression();
        list.add(e);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      e = expression();
            list.add(e);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

// ----------------------------------------------------------------------------
// MDX Statement
//
// <statement> ::= <selectStatement>
//                   | <drillthroughStatement>
//
// <selectStatement> ::= [WITH <formulaSpecification>]
//                         SELECT [<axisSpecification>
//                                [, <axisSpecification>...]]
//                         FROM [<cubeSpecification>]
//                         [WHERE <slicerSpecification>]
//                         [<cellProps>]
//
// <drillthroughStatment> ::=
//     DRILLTHROUGH
//     [ MAXROWS <count> ]
//     [ FIRSTROWSET <count> ]
//     <selectStatement>
//     [ RETURN <memberOrAttribute> [, <memberOrAttribute>...] ]
//
//
  final public ParseTreeNode statement() throws ParseException {
    ParseTreeNode qp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case WITH:
      qp = selectStatement();
      break;
    case DRILLTHROUGH:
      qp = drillthroughStatement();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return qp;}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode selectOrDrillthroughStatement() throws ParseException {
    ParseTreeNode qp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case WITH:
      qp = selectStatement();
        {if (true) return qp;}
      break;
    case DRILLTHROUGH:
      qp = drillthroughStatement();
        {if (true) return qp;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SelectNode selectStatement() throws ParseException {
     ParseTreeNode e;
     List<ParseTreeNode> f = new ArrayList<ParseTreeNode>();
     ParseTreeNode w = null;
     AxisNode i;
     List<AxisNode> a = new ArrayList<AxisNode>();
     ParseTreeNode c;
     IdentifierNode p;
     List<IdentifierNode> cellPropList = new ArrayList<IdentifierNode>();
     ParseRegion region = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
                 region = region(token);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MEMBER:
          e = memberSpecification();
               f.add(e);
          break;
        case SET:
          e = setSpecification();
               f.add(e);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MEMBER:
        case SET:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_14;
        }
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(SELECT);
        if (region == null) {
            region = region(token);
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case CAST:
    case DIMENSION:
    case NON:
    case NOT:
    case NULL:
    case PROPERTIES:
    case LBRACE:
    case LPAREN:
    case MINUS:
    case PLUS:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
    case SINGLE_QUOTED_STRING:
    case DOUBLE_QUOTED_STRING:
    case IdentifierNode:
    case QUOTED_ID:
    case AMP_QUOTED_ID:
    case AMP_UNQUOTED_ID:
      i = axisSpecification();
            a.add(i);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        i = axisSpecification();
                a.add(i);
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(FROM);
    c = cubeOrSelect();
        region = region.plus(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      w = expression();
            region = region.plus(w);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CELL:
    case PROPERTIES:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CELL:
        jj_consume_token(CELL);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(PROPERTIES);
      p = compoundId();
            cellPropList.add(p);
            region = region.plus(w);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        p = compoundId();
                cellPropList.add(p);
                region = region.plus(w);
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
        // sort axes by ordinal
        Collections.sort(a, AXIS_NODE_COMPARATOR);
        {if (true) return new SelectNode(
            region,
            f,
            a,
            c,
            w == null
                ? null
                : new AxisNode(w.getRegion(), false, Axis.FILTER, null, w),
            cellPropList);}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode cubeOrSelect() throws ParseException {
    ParseTreeNode c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIMENSION:
    case PROPERTIES:
    case IdentifierNode:
    case QUOTED_ID:
    case AMP_QUOTED_ID:
    case AMP_UNQUOTED_ID:
      c = compoundId();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      c = selectStatement();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

//
// <memberSpecification> ::= MEMBER <member_name> AS <valueExpression>
//                                 [, <solveOrderSpecification>]
//                                 [, <memberPropertyDefinition>...]
  final public WithMemberNode memberSpecification() throws ParseException {
    IdentifierNode m;
    ParseTreeNode e;
    List<PropertyValueNode> l = new ArrayList<PropertyValueNode>();
    PropertyValueNode mp;
    ParseRegion region;
    jj_consume_token(MEMBER);
               region = region(token);
    m = compoundId();
    jj_consume_token(AS);
    e = formulaExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      mp = memberPropertyDefinition();
            l.add(mp);
    }
        {if (true) return new WithMemberNode(region.plus(e).plus(l), m, e, l);}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode formulaExpression() throws ParseException {
    ParseTreeNode e;
    if (jj_2_8(2147483647)) {
      jj_consume_token(SINGLE_QUOTED_STRING);
        // Support archaic syntax "WITH MEMBER m AS ' <expr> ' ...";
        // "WITH MEMBER m AS <expr>" is now preferred.
        {if (true) return recursivelyParseExp(stripQuotes(token.image, "'", "'", "''"));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case CAST:
      case DIMENSION:
      case NOT:
      case NULL:
      case PROPERTIES:
      case LBRACE:
      case LPAREN:
      case MINUS:
      case PLUS:
      case UNSIGNED_INTEGER_LITERAL:
      case APPROX_NUMERIC_LITERAL:
      case DECIMAL_NUMERIC_LITERAL:
      case SINGLE_QUOTED_STRING:
      case DOUBLE_QUOTED_STRING:
      case IdentifierNode:
      case QUOTED_ID:
      case AMP_QUOTED_ID:
      case AMP_UNQUOTED_ID:
        e = unaliasedExpression();
        {if (true) return e;}
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public PropertyValueNode memberPropertyDefinition() throws ParseException {
    IdentifierSegment i;
    ParseTreeNode e;
    i = identifier();
    jj_consume_token(EQ);
    e = expression();
        {if (true) return new PropertyValueNode(i.getRegion().plus(e), i.getName(), e);}
    throw new Error("Missing return statement in function");
  }

  final public WithSetNode setSpecification() throws ParseException {
    IdentifierNode n;
    ParseTreeNode e;
    jj_consume_token(SET);
    n = compoundId();
    jj_consume_token(AS);
    e = formulaExpression();
        {if (true) return new WithSetNode(n.getRegion().plus(e), n, e);}
    throw new Error("Missing return statement in function");
  }

// <axisSpecification> ::= [NON EMPTY] <set> [<dimProps>] ON <axis_name>
  final public AxisNode axisSpecification() throws ParseException {
    boolean nonEmpty = false;
    ParseTreeNode e;
    List<IdentifierNode> dp = new ArrayList<IdentifierNode>();
    Axis axis;
    LiteralNode n;
    IdentifierNode p;
    ParseRegion region = null, axisRegion;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NON:
      jj_consume_token(NON);
            region = region(token);
      jj_consume_token(EMPTY);
            nonEmpty = true;
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    e = expression();
        if (region == null) {
            region = e.getRegion();
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIMENSION:
    case PROPERTIES:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIMENSION:
        jj_consume_token(DIMENSION);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(PROPERTIES);
      p = compoundId();
            dp.add(p);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
        p = compoundId();
                dp.add(p);
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(ON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMNS:
      jj_consume_token(COLUMNS);
            axis = Axis.COLUMNS;
            region = region.plus(region(token));
      break;
    case ROWS:
      jj_consume_token(ROWS);
            axis= Axis.ROWS;
            region = region.plus(region(token));
      break;
    case PAGES:
      jj_consume_token(PAGES);
            axis = Axis.PAGES;
            region = region.plus(region(token));
      break;
    case SECTIONS:
      jj_consume_token(SECTIONS);
            axis = Axis.SECTIONS;
            region = region.plus(region(token));
      break;
    case CHAPTERS:
      jj_consume_token(CHAPTERS);
            axis = Axis.CHAPTERS;
            region = region.plus(region(token));
      break;
    case AXIS:
    case UNSIGNED_INTEGER_LITERAL:
    case APPROX_NUMERIC_LITERAL:
    case DECIMAL_NUMERIC_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED_INTEGER_LITERAL:
      case APPROX_NUMERIC_LITERAL:
      case DECIMAL_NUMERIC_LITERAL:
        n = numericLiteral();
                axisRegion = region(token);
                region = region.plus(axisRegion);
        break;
      case AXIS:
        jj_consume_token(AXIS);
                axisRegion = region(token);
        jj_consume_token(LPAREN);
        n = numericLiteral();
        jj_consume_token(RPAREN);
                axisRegion = axisRegion.plus(region(token));
                region = region.plus(axisRegion);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            // AxisOrdinal values go from -2 to 4 for standard axis, but higher
            // ordinals are allowed. The negative values represent special
            // cases, so are ignored.
            Number number = (Number) n.getValue();
            if (number.doubleValue() < 0
                || number.doubleValue() != number.intValue())
            {
                {if (true) throw new MdxParseException(
                    axisRegion,
                    "Invalid axis specification. The axis number must be a "
                    + "non-negative integer, but it was " + number + ".");}
            }

            axis = Axis.Factory.forOrdinal(number.intValue());
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return new AxisNode(region, nonEmpty, axis, dp, e);}
    throw new Error("Missing return statement in function");
  }

  final public ParseTreeNode drillthroughStatement() throws ParseException {
    int m = 0, f = 0;
    List<ParseTreeNode> rl = null;
    SelectNode s;
    ParseRegion region;
    jj_consume_token(DRILLTHROUGH);
                     region = region(token);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAXROWS:
      jj_consume_token(MAXROWS);
      jj_consume_token(UNSIGNED_INTEGER_LITERAL);
            m = Integer.valueOf(token.image);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIRSTROWSET:
      jj_consume_token(FIRSTROWSET);
      jj_consume_token(UNSIGNED_INTEGER_LITERAL);
            f = Integer.valueOf(token.image);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    s = selectStatement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      jj_consume_token(RETURN);
      rl = returnItemList();
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
        {if (true) return new DrillThroughNode(region.plus(s).plus(rl),  s, m, f, rl);}
    throw new Error("Missing return statement in function");
  }

  final public List<ParseTreeNode> returnItemList() throws ParseException {
    List<ParseTreeNode> list = new ArrayList<ParseTreeNode>();
    IdentifierNode i;
    i = returnItem();
        list.add(i);
    jj_consume_token(COMMA);
    i = returnItem();
            list.add(i);
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public IdentifierNode returnItem() throws ParseException {
    IdentifierNode i;
    // TODO: allow NAME(IdentifierNode) etc.
        i = compoundId();
        {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(APPROX_NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(UNSIGNED_INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    if (jj_3R_50()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(DECIMAL_NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(QUOTED_ID)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(IdentifierNode)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(MATCHES)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(PROPERTIES)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(DIMENSION)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(CAST)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(SINGLE_QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DOUBLE_QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(AMP_UNQUOTED_ID)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(SINGLE_QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(AMP_QUOTED_ID)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public MdxParserImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000200,0x0,0x0,0x20000200,0x4000000,0x4000000,0x2,0x21800230,0x8e0000,0x0,0x0,0xc0000,0x820000,0x0,0x0,0x0,0x0,0x21000230,0x0,0x0,0x0,0x21800230,0x0,0x0,0x21000230,0x21800230,0x0,0x800,0x4,0x21800230,0x0,0x0,0x400,0x400,0x200000,0x200000,0x0,0x0,0x21c00230,0x0,0x40,0x0,0x20000040,0x20000200,0x0,0x21800230,0x400000,0x200,0x0,0x20000200,0x8,0x88000188,0x100000,0x4000,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x800040,0x800040,0x0,0x40000000,0xb8000000,0xb8000000,0xb8000000,0x0,0x0,0x2000000,0x2000000,0x200000,0x200000,0x40000000,0x4000000,0x0,0x0,0x40000000,0x400000,0x0,0x40000000,0x40000000,0x10,0x0,0x0,0x40000000,0x1000000,0x1000000,0x82,0x82,0x4,0x4,0x80,0x1000000,0x40000000,0x20,0x0,0x1000000,0x0,0x0,0x1000000,0x40000000,0x0,0x0,0x1000000,0x0,0x0,0x1,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x78000,0x60000,0x60000,0x0,0x0,0x0,0x0,0x7b715,0xa,0xa,0xa,0x0,0x0,0x14,0x14,0x80,0x80,0x7b715,0x0,0x1,0x700,0x7b715,0x0,0x1,0x7b701,0x7b715,0x0,0x0,0x0,0x7b715,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7b715,0x0,0x0,0x0,0x0,0x78001,0x0,0x7b715,0x0,0x0,0x0,0x0,0x700,0x700,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MdxParserImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MdxParserImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MdxParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MdxParserImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MdxParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MdxParserImpl(MdxParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MdxParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[85];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 55; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 85; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
